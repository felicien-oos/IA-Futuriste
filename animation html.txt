<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>IA Futuriste avec Chat + Image + Audio + Crayon</title>
<style>
  body {
    margin: 0; 
    height: 100vh; 
    display: flex; 
    flex-direction: column;
    background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #d0e8f2;
  }
  header {
    padding: 1rem;
    text-align: center;
    font-size: 1.8rem;
    font-weight: 700;
    letter-spacing: 2px;
    color: #4ef5ff;
    text-shadow: 0 0 8px #4ef5ff;
  }
  #chat {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    background: rgba(32,50,70,0.6);
  }
  .message {
    max-width: 60%;
    padding: 0.8rem 1rem;
    border-radius: 1rem;
    font-size: 1rem;
    line-height: 1.3;
  }
  .user {
    align-self: flex-end;
    background: linear-gradient(45deg, #3de8ff, #00bfff);
    color: #00394d;
    text-align: right;
    box-shadow: 0 0 6px #00bfff;
  }
  .bot {
    align-self: flex-start;
    background: linear-gradient(45deg, #2a4d69, #4b86b4);
    color: #cce7ff;
    text-align: left;
    box-shadow: 0 0 6px #4b86b4;
  }
  footer {
    background: #121c25cc;
    padding: 0.5rem 1rem;
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  input[type="text"] {
    flex: 1;
    padding: 0.7rem 1rem;
    border-radius: 2rem;
    border: none;
    font-size: 1rem;
    outline: none;
    background: #152c43;
    color: #d0e8f2;
    box-shadow: inset 0 0 5px #1f6fbb;
  }
  button {
    padding: 0.6rem 1.2rem;
    border: none;
    border-radius: 2rem;
    background: #00bfff;
    color: #00394d;
    font-weight: 700;
    cursor: pointer;
    box-shadow: 0 0 8px #00bfff;
    transition: background 0.3s ease;
  }
  button:hover {
    background: #3de8ff;
    box-shadow: 0 0 12px #3de8ff;
  }
  #tools {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }
  #canvas-container {
    position: fixed;
    top: 10%;
    right: 10px;
    width: 300px;
    height: 300px;
    background: #122434dd;
    border-radius: 10px;
    box-shadow: 0 0 12px #00bfffcc;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.5rem;
  }
  #canvas-container h3 {
    margin: 0 0 0.3rem 0;
    color: #4ef5ff;
    font-weight: 700;
  }
  #drawCanvas {
    border: 1px solid #00bfff;
    border-radius: 6px;
    background: #011a2d;
    cursor: crosshair;
  }
  #clearCanvas {
    margin-top: 0.5rem;
    background: #ff4c4c;
    color: #fff;
    box-shadow: 0 0 8px #ff4c4c;
  }
</style>
</head>
<body>
<header>IA Futuriste & Polyvalente</header>

<div id="chat"></div>

<footer>
  <input type="text" id="userInput" placeholder="Tape ta question ici..." autocomplete="off" />
  <button id="sendBtn">Envoyer</button>
  <div id="tools">
    <button id="generateImageBtn" title="G√©n√©rer une image">üñºÔ∏è Image</button>
    <button id="speakBtn" title="Lire √† voix haute">üîä Audio</button>
  </div>
</footer>

<div id="canvas-container">
  <h3>Crayon</h3>
  <canvas id="drawCanvas" width="280" height="220"></canvas>
  <button id="clearCanvas">Effacer</button>
</div>

<script>
  // Gestion chat basique (messages utilisateur + r√©ponses simul√©es)
  const chat = document.getElementById('chat');
  const userInput = document.getElementById('userInput');
  const sendBtn = document.getElementById('sendBtn');
  const generateImageBtn = document.getElementById('generateImageBtn');
  const speakBtn = document.getElementById('speakBtn');

  function addMessage(text, sender='bot') {
    const div = document.createElement('div');
    div.classList.add('message', sender);
    div.textContent = text;
    chat.appendChild(div);
    chat.scrollTop = chat.scrollHeight;
  }

  // Simule r√©ponse IA (ici tu peux brancher ton API Hugging Face ou ChatGPT)
  async function getBotResponse(inputText) {
    // Exemple simple de simulation avec d√©lai
    return new Promise(resolve => {
      setTimeout(() => {
        resolve("R√©ponse IA simul√©e pour : " + inputText);
      }, 1000);
    });
  }

  sendBtn.addEventListener('click', async () => {
    const text = userInput.value.trim();
    if(!text) return;
    addMessage(text, 'user');
    userInput.value = '';
    const response = await getBotResponse(text);
    addMessage(response, 'bot');
  });

  userInput.addEventListener('keydown', e => {
    if(e.key === 'Enter') sendBtn.click();
  });

  // --- G√©n√©ration Image via Hugging Face Spaces (Stable Diffusion) ---
  // Utilise une API Hugging Face publique (limites importantes)
  generateImageBtn.addEventListener('click', async () => {
    const prompt = prompt("Donne un texte pour g√©n√©rer une image :");
    if(!prompt) return;
    addMessage("üñºÔ∏è G√©n√©ration d'image pour : " + prompt, 'user');
    addMessage("Patiente un instant...", 'bot');

    try {
      // Exemple d'appel API Hugging Face Spaces - stable-diffusion-v1-4
      // Remplace avec ton token si tu en as un pour lever les limitations
      const apiURL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2";
      const response = await fetch(apiURL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // "Authorization": "Bearer TON_TOKEN_ICI"  // si tu as un token
        },
        body: JSON.stringify({ inputs: prompt })
      });

      if(!response.ok) throw new Error(`Erreur API: ${response.status}`);

      // La r√©ponse est un flux binaire d'image
      const blob = await response.blob();
      const imgURL = URL.createObjectURL(blob);
      addMessage("", 'bot');
      const img = document.createElement('img');
      img.src = imgURL;
      img.style.maxWidth = "300px";
      img.style.borderRadius = "12px";
      chat.appendChild(img);
      chat.scrollTop = chat.scrollHeight;

    } catch(e) {
      addMessage("Erreur lors de la g√©n√©ration d'image : " + e.message, 'bot');
    }
  });

  // --- Text-to-Speech (voix synth√©tique) via Web Speech API ---
  speakBtn.addEventListener('click', () => {
    const lastBotMsg = Array.from(chat.querySelectorAll('.bot')).pop();
    if(!lastBotMsg) return alert("Aucun message √† lire.");
    const text = lastBotMsg.textContent;
    if(!window.speechSynthesis) return alert("TTS non support√© par ton navigateur.");

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'fr-FR';
    utterance.rate = 1;
    window.speechSynthesis.speak(utterance);
  });

  // --- Canvas Crayon ---
  const canvas = document.getElementById

